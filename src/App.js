// src/App.js (ƒê√£ refactor - T√°ch API v√† d√πng Context)

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import React, { useState, useEffect } from "react";
import { performLiveSearch } from "./utils/search";

// --- IMPORT API ---
import { 
  fetchAllDataForSearchCache, loadCacheFromStorage, saveCacheToStorage
} from "./services/api_client"; // <-- api_client.js (App Script)

// --- IMPORT C√ÅC TRANG ---
import LoginPage from './pages/LoginPage';
import Home from "./pages/Home";
import CoupleFilmMographyPage from "./pages/CoupleFilmMographyPage";
import StorylineFilmMographyPage from "./pages/StorylineFilmMographyPage";
import StorylinePage from "./pages/StorylinePage";
import AllCouplesPage from "./pages/AllCouplesPage";
import MovieDetail from "./pages/MovieDetail";
import AllActorsPage from "./pages/AllActorsPage";
import SearchResultsPage from "./pages/SearchResultsPage";
import ActorProfilePage from "./pages/ActorProfilePage";
import AdminSandbox from "./pages/AdminSandbox";
import CollectionPage from "./pages/CollectionPage"; // <-- TH√äM TRANG COLLECTION

// --- IMPORT C√ÅC COMPONENT ---
import Header from "./components/Header";
import ScrollToTopButton from "./components/ScrollToTopButton";
import useDebounce from "./hooks/useDebounce";
import "./App.css";

// --- IMPORT C√ÅC HOOK L·ªåC/S·∫ÆP X·∫æP ---
import { useMovieFilter } from './hooks/useMovieFilter';
import { useActorFilter } from './hooks/useActorFilter';
import { useCouplesFilter } from './hooks/useCouplesFilter';
import { useStorylineFilter } from './hooks/useStorylineFilter';

// L∆ØU √ù: App KH√îNG c·∫ßn import useAuth hay getCollection n·ªØa
// V√¨ CollectionContext s·∫Ω t·ª± qu·∫£n l√Ω

function App() {
  const [isLoading, setIsLoading] = useState(true); 

  const [searchCache, setSearchCache] = useState({ movies: [], actors: [], couples: [], storylines: [] });
  const [isCacheReady, setIsCacheReady] = useState(false); // "C√¥ng t·∫Øc"

  // (C√°c state cho filter/search gi·ªØ nguy√™n)
  const { displayMovies, ...movieControls } = useMovieFilter(searchCache.movies);
  const { displayActors, ...actorControls } = useActorFilter(searchCache.actors);
  const { displayCouples, ...coupleControls } = useCouplesFilter(searchCache.couples);
  const { displayStorylines, ...storylineControls } = useStorylineFilter(searchCache.storylines);

  const [searchQuery, setSearchQuery] = useState("");
  const [searchScope, setSearchScope] = useState("tenPhim");
  const [liveResults, setLiveResults] = useState([]);
  const debouncedSearchQuery = useDebounce(searchQuery, 100);

  // --- useEffect T·∫¢I D·ªÆ LI·ªÜU (LOGIC M·ªöI - Gi·ªØ nguy√™n) ---
  useEffect(() => {
    setIsLoading(true);
    
    // 1. Import th√™m saveCacheToStorage
    // (H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ import { loadCacheFromStorage, fetchAllDataForSearchCache, saveCacheToStorage } ·ªü ƒë·∫ßu file App.js)
    
    // 2. Th·ª≠ t·∫£i t·ª´ cache tr∆∞·ªõc
    const cachedData = loadCacheFromStorage(6); // Cache 1 gi·ªù

    if (cachedData) {
      // --- CH·∫æ ƒê·ªò 1: CLIENT (C√ì CACHE) ---
      console.log("üöÄ S·ª≠ d·ª•ng cache t·ª´ localStorage. K√≠ch ho·∫°t Ch·∫ø ƒë·ªô Client.");
      setSearchCache(cachedData);
      setIsCacheReady(true);
      setIsLoading(false);
      return; // D·ª´ng l·∫°i, kh√¥ng l√†m g√¨ n·ªØa
    }

    // --- CH·∫æ ƒê·ªò 2: SERVER (KH√îNG C√ì CACHE) ---
    // (Logic n√†y c·ªßa b·∫°n l√† ƒë√∫ng ƒë·ªÉ API Cloudflare ch·∫°y ƒë∆∞·ª£c)
    console.log("üåê Kh√¥ng c√≥ cache localStorage, hi·ªÉn th·ªã trang ·ªü Ch·∫ø ƒë·ªô Server.");
    setIsLoading(false); // Cho ph√©p c√°c trang con render v√† g·ªçi API server (Cloudflare)
    
    // 3. Ch·∫°y ng·∫ßm ƒë·ªÉ T·∫¢I V√Ä K√çCH HO·∫†T cache (t·ª´ Apps Script)
    fetchAllDataForSearchCache().then(cacheData => {
      console.log("‚úÖ Cache (Apps Script) ƒë√£ t·∫£i xong. B·∫¨T C√îNG T·∫ÆC.");
      setSearchCache(cacheData); 

      // saveCacheToStorage(cacheData); //N∆†I K√çCH HO·∫†T L∆ØU V√ÄO LOCALSTORAGE
      
      setIsCacheReady(true); // <-- K√çCH HO·∫†T C√îNG T·∫ÆC
      
    }).catch(error => {
      console.error("‚ùå L·ªói khi t·∫£i cache n·ªÅn:", error);
      // N·∫øu t·∫£i cache l·ªói, v·∫´n b·∫≠t c√¥ng t·∫Øc ƒë·ªÉ app ch·∫°y ·ªü ch·∫ø ƒë·ªô server
      setIsCacheReady(true); 
    });
    
  }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn

  // --- useEffect CHO LIVE SEARCH (gi·ªØ nguy√™n) ---
  useEffect(() => {
    if (searchQuery.length < 2 || !isCacheReady) {
      setLiveResults([]);
      return;
    }
    if (debouncedSearchQuery) {
      const results = performLiveSearch(
        debouncedSearchQuery, searchScope,
        searchCache.movies, searchCache.actors, searchCache.couples, searchCache.storylines
      );
      setLiveResults(results.slice(0, 5));
    }
  }, [debouncedSearchQuery, searchScope, searchCache, isCacheReady]);

  if (isLoading) {
    return <div className="loading-message">ƒêang kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...</div>;
  }

  return (
    <Router>
      <div className="App">
        <Header
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          searchScope={searchScope}
          setSearchScope={setSearchScope}
          liveResults={liveResults}
          isSearchReady={isCacheReady}
        />
        <Routes>
          <Route
            path="/"
            element={
              <Home
                clientMovies={displayMovies} 
                {...movieControls}
                isCacheReady={isCacheReady} // Pass "c√¥ng t·∫Øc"
              />
            }
          />
          <Route 
            path="/dien-vien/all-actors" 
            element={
              <AllActorsPage 
                clientActors={displayActors} 
                {...actorControls}
                isCacheReady={isCacheReady} 
              />
            } 
          />
          <Route
            path="/dien-vien-couples/all-couples"
            element={
              <AllCouplesPage 
                clientCouples={displayCouples}
                {...coupleControls}
                isCacheReady={isCacheReady}
              />
            }
          />
          <Route
            path="/phim-couples/all-couples"
            element={
              <StorylinePage
                clientStorylines={displayStorylines}
                {...storylineControls}
                isCacheReady={isCacheReady}
              />
            }
          />
          {/* --- C√ÅC ROUTE CHI TI·∫æT --- */}
          <Route
            path="/phim/:id"
            // S·ª¨A: X√≥a props collection v√† setCollection
            element={<MovieDetail movies={searchCache.movies} isCacheReady={isCacheReady} />}
          />
          <Route
            path="/search"
            element={<SearchResultsPage allMovies={searchCache.movies} />}
          />
          <Route 
            path="/dien-vien/:slug" 
            element={
              <ActorProfilePage 
                actors={searchCache.actors} // Lu√¥n truy·ªÅn full cache
                isCacheReady={isCacheReady} 
              />
            } 
          />
          <Route path="/admin-sandbox" element={<AdminSandbox />} />
          <Route
            path="/dien-vien-couples/:coupleId"
            element={
              <CoupleFilmMographyPage 
                allCouples={searchCache.couples} // Lu√¥n truy·ªÅn full cache
                isCacheReady={isCacheReady} 
              />
            }
          />
          <Route
            path="/phim-couples/:storylineId"
            element={
              <StorylineFilmMographyPage 
                allStorylines={searchCache.storylines} // Lu√¥n truy·ªÅn full cache
                isCacheReady={isCacheReady} 
              />
            }
          />
          <Route path="/login" element={<LoginPage />} />
          
          {/* --- ROUTE M·ªöI CHO B·ªò S∆ØU T·∫¨P --- */}
          <Route 
            path="/bo-suu-tap" 
            // S·ª¨A: Kh√¥ng c·∫ßn truy·ªÅn props
            element={<CollectionPage />} 
          />

        </Routes>
        <ScrollToTopButton />
      </div>
    </Router>
  );
}

export default App;