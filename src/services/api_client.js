// src/services/api_client.js (File m·ªõi)

import { auth } from '../firebase';

// URL c·ªßa API Google Apps Script
const API_URL = "https://script.google.com/macros/s/AKfycbyU2ieJmUVhvXK7TuVoHs_CM3QoA6_fstXtfnvOIt_JgYRYnZMKkfNvQ2Y-YIjB5o3pZg/exec";
const APP_CACHE_KEY = 'myAppSearchCache';

/**
 * H√†m chung ƒë·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu POST ƒë·∫øn Apps Script.
 * @param {string} action - T√™n h√†nh ƒë·ªông (v√≠ d·ª•: 'addMovie').
 * @param {object} payload - D·ªØ li·ªáu c·∫ßn g·ª≠i ƒëi.
 */
const fetchPostData = async (action, payload) => {
  try {
    const user = auth.currentUser;
    let token = null;

    if (user) {
      token = await user.getIdToken(true);
    } else {
      throw new Error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.");
    }
    
    const requestBody = { action, payload, token };

    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      redirect: 'follow'
    }); 

    const result = await response.json(); 
    if (result.status === 'success' || result.status === 'info') {
      return result; 
    } else {
      throw new Error(result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API');
    }
  } catch (error) {
    console.error(`L·ªói POST action "${action}":`, error);
    throw error;
  }
};

/**
 * H√†m chung ƒë·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu GET v√† tr·∫£ v·ªÅ d·ªØ li·ªáu JSON.
 * @param {string} queryString - Chu·ªói truy v·∫•n cho URL (v√≠ d·ª•: '?action=getAllMovies').
 * @returns {Promise<any>} - D·ªØ li·ªáu JSON t·ª´ API.
 */
const fetchGetData = async (queryString) => {
  try {
    const response = await fetch(`${API_URL}${queryString}`);
    if (!response.ok) {
      throw new Error(`L·ªói m·∫°ng: ${response.statusText}`);
    }
    const result = await response.json();
    if (result.status === 'success') {
      return result.data;
    } else {
      throw new Error(`L·ªói t·ª´ API: ${result.message}`);
    }
  } catch (error) {
    console.error(`L·ªói khi th·ª±c hi·ªán y√™u c·∫ßu GET (${queryString}):`, error);
    return []; 
  }
};

/**
 * --- H√ÄM 1: T·∫¢I CACHE T·ª™ LOCALSTORAGE ---
 * (Gi·ªØ nguy√™n logic c·ªßa b·∫°n)
 */
export const loadCacheFromStorage = (maxAgeInHours = 24) => {
  try {
    const storedCache = localStorage.getItem(APP_CACHE_KEY);
    if (!storedCache) {
      console.log("üîç Kh√¥ng t√¨m th·∫•y cache trong localStorage.");
      return null;
    }

    const { timestamp, data } = JSON.parse(storedCache);
    const now = new Date().getTime();
    const maxAgeInMs = maxAgeInHours * 60 * 60 * 1000;

    if (now - timestamp < maxAgeInMs) {
      // Cache h·ª£p l·ªá
      console.log("üëç T·∫£i cache th√†nh c√¥ng t·ª´ localStorage.");
      return data;
    } else {
      // Cache h·∫øt h·∫°n
      console.log("‚åõ Cache ƒë√£ h·∫øt h·∫°n. C·∫ßn t·∫£i l·∫°i.");
      localStorage.removeItem(APP_CACHE_KEY); // X√≥a cache c≈©
      return null;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è L·ªói khi ƒë·ªçc localStorage (d·ªØ li·ªáu c√≥ th·ªÉ b·ªã h·ªèng):", error);
    localStorage.removeItem(APP_CACHE_KEY); // X√≥a n·∫øu b·ªã l·ªói
    return null;
  }
};

/**
 * --- H√ÄM 2: H√ÄM M·ªöI ƒê·ªÇ L∆ØU CACHE ---
 * (ƒê√£ ƒë∆∞·ª£c t√°ch ra theo y√™u c·∫ßu c·ªßa b·∫°n)
 */
export const saveCacheToStorage = (cacheData) => {
  if (!cacheData || !cacheData.movies || cacheData.movies.length === 0) {
    console.warn("‚ö†Ô∏è D·ªØ li·ªáu cache r·ªóng (ho·∫∑c kh√¥ng c√≥ phim), kh√¥ng l∆∞u v√†o localStorage.");
    return;
  }
  
  try {
    const dataToStore = {
      timestamp: new Date().getTime(), // Th√™m d·∫•u th·ªùi gian
      data: cacheData // L∆∞u to√†n b·ªô object { movies, actors, ... }
    };
    localStorage.setItem(APP_CACHE_KEY, JSON.stringify(dataToStore));
    console.log("üíæ ƒê√£ l∆∞u cache v√†o localStorage.");
  } catch (storageError) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u v√†o localStorage (c√≥ th·ªÉ do ƒë·∫ßy):", storageError);
  }
};


/**
 * --- H√ÄM 3: T·∫¢I D·ªÆ LI·ªÜU T·ª™ APPS SCRIPT ---
 * (ƒê√£ th√™m log chi ti·∫øt v√† x√≥a logic t·ª± l∆∞u)
 */
export const fetchAllDataForSearchCache = async () => {
  console.log("‚è≥ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu (App Script) cho b·ªô ƒë·ªám t√¨m ki·∫øm...");
  
  try {
    // 1. G·ªçi h√†m g·ªôp c·ªßa b·∫°n
    const cacheData = await fetchGetData('?action=fetchAllDataForSearchCache');
    
    // --- LOG L·ªñI CHI TI·∫æT ---
    if (!cacheData) {
      throw new Error("Apps Script kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu (null ho·∫∑c undefined).");
    }

    let hasCriticalError = false;

    // Ki·ªÉm tra Movies (quan tr·ªçng nh·∫•t)
    if (!cacheData.movies || !Array.isArray(cacheData.movies)) {
      console.error("‚ùå L·ªói D·ªØ Li·ªáu: 'movies' b·ªã thi·∫øu ho·∫∑c kh√¥ng ph·∫£i l√† m·∫£ng.");
      hasCriticalError = true;
    } else if (cacheData.movies.length === 0) {
      console.warn("‚ö†Ô∏è C·∫£nh b√°o D·ªØ Li·ªáu: 'movies' l√† m·∫£ng r·ªóng.");
    } else {
      console.log(`‚úÖ T·∫£i xong ${cacheData.movies.length} phim.`);
    }

    // Ki·ªÉm tra Actors
    if (!cacheData.actors || !Array.isArray(cacheData.actors)) {
      console.warn("‚ö†Ô∏è C·∫£nh b√°o D·ªØ Li·ªáu: 'actors' b·ªã thi·∫øu ho·∫∑c kh√¥ng ph·∫£i l√† m·∫£ng.");
    } else {
      console.log(`‚úÖ T·∫£i xong ${cacheData.actors.length} di·ªÖn vi√™n.`);
    }

    // Ki·ªÉm tra Couples
    if (!cacheData.couples || !Array.isArray(cacheData.couples)) {
      console.warn("‚ö†Ô∏è C·∫£nh b√°o D·ªØ Li·ªáu: 'couples' b·ªã thi·∫øu ho·∫∑c kh√¥ng ph·∫£i l√† m·∫£ng.");
    } else {
      console.log(`‚úÖ T·∫£i xong ${cacheData.couples.length} couples.`);
    }

    // Ki·ªÉm tra Storylines
    if (!cacheData.storylines || !Array.isArray(cacheData.storylines)) {
      console.warn("‚ö†Ô∏è C·∫£nh b√°o D·ªØ Li·ªáu: 'storylines' b·ªã thi·∫øu ho·∫∑c kh√¥ng ph·∫£i l√† m·∫£ng.");
    } else {
      console.log(`‚úÖ T·∫£i xong ${cacheData.storylines.length} storylines.`);
    }
    
    if (hasCriticalError) {
      throw new Error("D·ªØ li·ªáu 'movies' kh√¥ng h·ª£p l·ªá, h·ªßy b·ªè qu√° tr√¨nh cache.");
    }
    // -------------------------

    console.log("‚úÖ D·ªØ li·ªáu (App Script) ƒë√£ t·∫£i xong v√† c√≥ c·∫•u tr√∫c h·ª£p l·ªá.");
    // 2. Ch·ªâ tr·∫£ v·ªÅ d·ªØ li·ªáu, KH√îNG T·ª∞ L∆ØU
    return cacheData;

  } catch (error) {
    console.error("‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i d·ªØ li·ªáu (App Script):", error);
    // Tr·∫£ v·ªÅ c·∫•u tr√∫c r·ªóng ƒë·ªÉ ·ª©ng d·ª•ng kh√¥ng b·ªã crash
    return { movies: [], actors: [], couples: [], storylines: [] };
  }
};

/**
 * [FALLBACK] L·∫•y T·∫§T C·∫¢ phim t·ª´ App Script.
 */
export const getAllMovies_AppScript = () => fetchGetData('?action=getAllMovies');

// L·∫•y danh s√°ch t·∫•t c·∫£ di·ªÖn vi√™n
export const getAllActors_AppScript = () => fetchGetData('?action=getAllActors');

// L·∫•y danh s√°ch c√°c phim ƒëang ch·ªù x·ª≠ l√Ω
export const getPendingMovies_AppScript = () => fetchGetData('?action=getPendingMovies');

// L·∫•y th√¥ng tin profile chi ti·∫øt c·ªßa m·ªôt di·ªÖn vi√™n
export const getActorProfile_AppScript = (slug) => fetchGetData(`?action=getActorProfile&slug=${slug}`);

// L·∫•y danh s√°ch t·∫•t c·∫£ phim theo c√°c c·∫∑p ƒë√¥i di·ªÖn vi√™n
export const getMovieCouples_AppScript = () => fetchGetData('?action=getMovieCouples');

// L·∫•y danh s√°ch T·∫§T C·∫¢ c√°c c·∫∑p ƒë√¥i (k√®m phim)
export const getAllMovieCouples_AppScript = () => fetchGetData('?action=getAllMovieCouples');

// L·∫•y danh s√°ch phim c√πng c·ªët truy·ªán
export const getMoviesByStoryline_AppScript = () => fetchGetData('?action=getMoviesByStoryline');

// L·∫•y b·ªô s∆∞u t·∫≠p phim c·ªßa ng∆∞·ªùi d√πng
export const getCollection_AppScript = () => fetchGetData('?action=getCollection');

// Th√™m phim v√†o b·ªô s∆∞u t·∫≠p
export const addToCollection_AppScript = (movieData) => fetchPostData('addToCollection', movieData);

// X√≥a phim kh·ªèi b·ªô s∆∞u t·∫≠p
export const removeFromCollection_AppScript = (movieId) => fetchPostData('removeFromCollection', { id: movieId });

// --- C√ÅC H√ÄM POST D·ªÆ LI·ªÜU (CHO TRANG ADMIN) ---
export const addMovie_AppScript = (movieData) => fetchPostData('addMovie', movieData);
export const updateMovie_AppScript = (movieData) => fetchPostData('updateMovie', movieData);
export const deleteMovie_AppScript = (movieId) => fetchPostData('deleteMovie', { ID: movieId });