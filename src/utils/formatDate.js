/**
 * ƒê·ªãnh d·∫°ng ng√†y th√°ng v·ªÅ d·∫°ng DD/MM/YYYY.
 * H·ªó tr·ª£:
 *  - Firestore timestamp ("2000-05-10T00:00:00Z")
 *  - Chu·ªói ng√†y ki·ªÉu "18.08.1998" ho·∫∑c "18/08/1998"
 *  - ƒê·ªëi t∆∞·ª£ng Firestore Timestamp (n·∫øu d√πng SDK)
 * @param {any} inputDate - Chu·ªói, s·ªë, ho·∫∑c object ng√†y th√°ng.
 * @returns {string} - Chu·ªói ng√†y DD/MM/YYYY ho·∫∑c "Ch∆∞a r√µ" / "Ng√†y kh√¥ng h·ª£p l·ªá".
 */
export const formatDate = (inputDate) => {
  if (!inputDate) return 'Ch∆∞a r√µ';

  try {
    let dateObj = null;

    // üß© 1. N·∫øu l√† ƒë·ªëi t∆∞·ª£ng Firestore Timestamp (c√≥ .seconds)
    if (typeof inputDate === 'object' && inputDate.seconds) {
      dateObj = new Date(inputDate.seconds * 1000);
    }
    // üß© 2. N·∫øu l√† chu·ªói ISO ho·∫∑c timestampValue
    else if (typeof inputDate === 'string' && inputDate.includes('T')) {
      dateObj = new Date(inputDate);
    }
    // üß© 3. N·∫øu l√† chu·ªói ng√†y ki·ªÉu "18.08.1998" ho·∫∑c "18/08/1998"
    else if (typeof inputDate === 'string') {
      const normalized = inputDate.replace(/\./g, '/'); // thay "." b·∫±ng "/"
      const parts = normalized.split('/');
      if (parts.length === 3) {
        const [day, month, year] = parts.map(p => parseInt(p, 10));
        if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
          dateObj = new Date(year, month - 1, day);
        }
      }
    }

    // üß© 4. N·∫øu v·∫´n ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c
    if (!(dateObj instanceof Date) || isNaN(dateObj.getTime())) {
      return 'Ng√†y kh√¥ng h·ª£p l·ªá';
    }

    // ‚úÖ Tr·∫£ v·ªÅ d·∫°ng DD/MM/YYYY theo chu·∫©n Vi·ªát Nam
    return dateObj.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  } catch (error) {
    console.error('L·ªói ƒë·ªãnh d·∫°ng ng√†y:', error);
    return 'Ng√†y kh√¥ng h·ª£p l·ªá';
  }
};
